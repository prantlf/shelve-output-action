name: 'Shelve Build Output'
description: 'GitHub action for shelving a build output on each platform to cache, so that it can be unshelved later to create a release.'
author: prantlf

branding:
  icon: upload
  color: blue

inputs:
  name:
    description: >-
      The name of the archive without the platform and architecture and without the `.zip` extension. The project name from `v.mod` will be used by default. The name of the archive will be `{name}-{os}-{arch}.zip`, for example: `newchanges-linux-x64.zip`.
  archive:
    description: >-
      The full name of the archive to be created, including the platform and architecture and the `.zip` extension. The project name from `v.mod` will be used by default, if `name` isn't provided. The name of the archive will be `{name}-{os}-{arch}.zip`, for example: `newchanges-linux-x64.zip`.
  path:
    description: >-
      The path to the binary file to package. The project name from `v.mod` will be used by default, with the file extenson according to the platform. (`.exe` will be appended on Windows by default.)

outputs:
  archive:
    description: >-
      The name of the archive, which was created.
    value: ${{ steps.setup-shelve.outputs.archive }}
  path:
    description: >-
      The path to the file, which was packed.
    value: ${{ steps.setup-shelve.outputs.path }}
  cache-key:
    description: >-
      The key, whcih was used to store the created archive to cache.
    value: ${{ steps.setup-shelve.outputs.cache-key }}

runs:
  using: 'composite'
  steps:
  - name: Check platform and architecture
    if: ${{ runner.os != 'Linux' && runner.os != 'macOS' && runner.os != 'Windows' || runner.arch != 'X64' }}
    env:
      SO_PLAT: ${{ runner.os }}
      SO_ARCH: ${{ inputs.sha256sum }}
    shell: bash
    run: |
      echo "::error title=â›” Unsupported platform or architecture: $SO_PLAT-$SO_ARCH error hint::Supported are Linux, macOS, Windows on X64"
      exit 1
  - name: Setup parameters
    id: setup-shelve
    env:
      SO_PLAT: ${{ runner.os }}
      SO_ARCH: ${{ runner.arch }}
      SO_NAME: ${{ inputs.name }}
      SO_ARCHIVE: ${{ inputs.archive }}
      SO_PATH: ${{ inputs.path }}
      SO_HASH: ${{ github.sha }}
    shell: bash
    run: |
      SO_PLAT=$(echo "$SO_PLAT" | tr '[:upper:]' '[:lower:]')
      SO_ARCH=$(echo "$SO_ARCH" | tr '[:upper:]' '[:lower:]')
      if [[ "$SO_ARCHIVE" == "" ]]; then
        if [[ "$SO_NAME" == "" ]]; then
          SO_NAME=$(node -e "console.log(/^.*name: *['\"]([^'\"]+)['\"].*$/mg.exec(require('fs').readFileSync('v.mod', 'utf8'))[1])")
        fi
        SO_ARCHIVE=$SO_NAME-$SO_PLAT-$SO_ARCH.zip
      fi
      echo "archive=$SO_ARCHIVE" >> $GITHUB_OUTPUT
      if [[ "$SO_PATH" == "" ]]; then
        if [[ "$SO_NAME" == "" ]]; then
          SO_NAME=$(node -e "console.log(/^.*name: *['\"]([^'\"]+)['\"].*$/mg.exec(require('fs').readFileSync('v.mod', 'utf8'))[1])")
        fi
        SO_PATH=$SO_NAME
        if [[ "$SO_PLAT" == "windows" ]]; then
          SO_PATH="$SO_NAME.exe"
        fi
      fi
      echo "path=$SO_PATH" >> $GITHUB_OUTPUT
      echo "cache-key=$SO_ARCHIVE-$SO_HASH" >> $GITHUB_OUTPUT
  - name: Pack on Linux and macOS
    if: ${{ runner.os == 'Linux' || runner.os == 'macOS' }}
    shell: bash
    run: zip -9j ${{ steps.setup-shelve.outputs.archive }} ${{ steps.setup-shelve.outputs.path }}
  - name: Pack on Windows
    if: ${{ runner.os == 'Windows' }}
    shell: powershell
    run: Compress-Archive -Path "${{ steps.setup-shelve.outputs.path }}" -DestinationPath "${{ steps.setup-shelve.outputs.archive }}"
  - name: Put archive to cache
    uses: actions/cache/save@v3
    with:
      path: ${{ steps.setup-shelve.outputs.archive }}
      key: ${{ steps.setup-shelve.outputs.cache-key }}
      enableCrossOsArchive: true
