name: 'Shelve Build Output'
description: 'GitHub action for shelving a build output on each platform to cache, so that it can be unshelved later to create a release.'
author: prantlf

branding:
  icon: upload
  color: blue

inputs:
  name:
    description: >-
      The name of the archive without the platform and architecture and without the `.zip` extension. The project name from `v.mod` will be used by default. The name of the archive will be `{name}-{os}-{arch}.zip`, for example: `newchanges-linux-x64.zip`.
  archive:
    description: >-
      The full name of the archive to be created, including the platform and architecture and the `.zip` extension. The project name from `v.mod` will be used by default, if `name` isn't provided. The name of the archive will be `{name}-{os}-{arch}.zip`, for example: `newchanges-linux-x64.zip`.
  os:
    description: >-
      Override the operating system of the runner. Use if you are cross-compiling. Possible values: `linux`, `macos`, and `windows`.
  arch:
    description: >-
      Override the architecture of the runner. Use if you are cross-compiling. Possible values: `arm`, `arm64`, `x64`, and `x86`.
  path:
    description: >-
      The path to the binary file to package. The project name from `v.mod` will be used by default, with the file extenson according to the platform. (`.exe` will be appended on Windows by default.)
  extra:
    description: >-
      Paths to additional directories and files to include in the archive together with the binary executable. (No Windows support yet.)
  branches:
    description: >-
      Branches which this action should run for, which are used to publishing releases. Use spaces for separating the branch names. If you want to use multiple lines in YAML, introduce them with ">-". If you want to allow all branches, set the value to "*".
    default: main master
  enable:
    description: >-
      Can be set to `false` to prevent this action from packing the archive. It's helpful in the pipeline, which will not continue releasing, but only building and testing, and that will be decided in the middle of a job execution.
    default: true

outputs:
  archive:
    description: >-
      The name of the archive, which was created.
    value: ${{ steps.setup.outputs.archive }}
  path:
    description: >-
      The path to the file, which was packed.
    value: ${{ steps.setup.outputs.path }}
  cache-key:
    description: >-
      The key, which was used to store the created archive to cache.
    value: ${{ steps.setup.outputs.cache-key }}

runs:
  using: 'composite'
  steps:
  - name: Setup parameters
    if: ${{ inputs.enable == 'true' }}
    id: setup
    env:
      SO_PLAT: ${{ runner.os }}
      SO_ARCH: ${{ runner.arch }}
      SO_PLAT_OVER: ${{ inputs.os }}
      SO_ARCH_OVER: ${{ inputs.arch }}
      SO_NAME: ${{ inputs.name }}
      SO_ARCHIVE: ${{ inputs.archive }}
      SO_PATH: ${{ inputs.path }}
      SO_HASH: ${{ github.sha }}
      SO_BRANCHES: ${{ inputs.branches }}
    shell: bash
    run: |
      if [[ "$SO_PLAT_OVER" != "" ]]; then
        SO_PLAT=$SO_PLAT_OVER
      fi
      if [[ "$SO_ARCH_OVER" != "" ]]; then
        SO_ARCH=$SO_ARCH_OVER
      fi
      SO_PLAT=$(echo "$SO_PLAT" | tr '[:upper:]' '[:lower:]')
      SO_ARCH=$(echo "$SO_ARCH" | tr '[:upper:]' '[:lower:]')
      if [[ "$SO_ARCHIVE" == "" ]]; then
        if [[ "$SO_NAME" == "" ]]; then
          SO_NAME=$(node -e "console.log(/^.*name: *['\"]([^'\"]+)['\"].*$/mg.exec(require('fs').readFileSync('v.mod', 'utf8'))[1])")
        fi
        SO_ARCHIVE=$SO_NAME-$SO_PLAT-$SO_ARCH.zip
      fi
      echo "archive=$SO_ARCHIVE" >> $GITHUB_OUTPUT
      if [[ "$SO_PATH" == "" ]]; then
        if [[ "$SO_NAME" == "" ]]; then
          SO_NAME=$(node -e "console.log(/^.*name: *['\"]([^'\"]+)['\"].*$/mg.exec(require('fs').readFileSync('v.mod', 'utf8'))[1])")
        fi
        SO_PATH=$SO_NAME
        if [[ "$SO_PLAT" == "windows" ]]; then
          SO_PATH="$SO_NAME.exe"
        fi
      fi
      echo "path=$SO_PATH" >> $GITHUB_OUTPUT
      echo "cache-key=$SO_ARCHIVE-$SO_HASH" >> $GITHUB_OUTPUT
      if [[ "$SO_BRANCHES" == "*" || " $SO_BRANCHES " == *" $GITHUB_REF_NAME "* ]]; then
        echo "enable=true" >> $GITHUB_OUTPUT
      fi
  - name: Check platform and architecture
    if: ${{ steps.setup.outputs.enable == 'true' && (runner.os != 'Linux' && runner.os != 'macOS' && runner.os != 'Windows' || runner.arch != 'X64') }}
    env:
      SO_PLAT: ${{ runner.os }}
      SO_ARCH: ${{ runner.arch }}
    shell: bash
    run: |
      echo "::error title=â›” Unsupported platform or architecture: $SO_PLAT-$SO_ARCH error hint::Supported are Linux, macOS, Windows on X64"
      exit 1
  - name: Pack on Linux and macOS
    if: ${{ steps.setup.outputs.enable == 'true' && (runner.os == 'Linux' || runner.os == 'macOS') }}
    shell: bash
    run: |
      zip -9j ${{ steps.setup.outputs.archive }} ${{ steps.setup.outputs.path }}
      if [[ "$SO_EXTRA" != "" ]]; then
        zip -9r ${{ steps.setup.outputs.archive }} $SO_EXTRA
      fi
    env:
      SO_EXTRA: ${{ inputs.extra }}
  - name: Pack on Windows
    if: ${{ steps.setup.outputs.enable == 'true' && runner.os == 'Windows' }}
    shell: powershell
    run: Compress-Archive -Path "${{ steps.setup.outputs.path }}" -DestinationPath "${{ steps.setup.outputs.archive }}"
  - name: Put archive to cache
    if: ${{ steps.setup.outputs.enable == 'true' }}
    uses: actions/cache/save@v3
    with:
      path: ${{ steps.setup.outputs.archive }}
      key: ${{ steps.setup.outputs.cache-key }}
      enableCrossOsArchive: true
